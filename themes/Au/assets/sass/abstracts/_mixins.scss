// themes/Au/assets/sass/abstracts/_mixins.scss

// ----------------------------------------------------------------------
// NOTE: Must load variables first to make them available as 'vars.'
// ----------------------------------------------------------------------
@use 'variables' as vars;


/**
 * Mixin to apply styles from a given minimum width (min-width).
 * Assumes a mobile-first approach.
 * Usage: @include media-up(tablet) { ... }
 */
@mixin media-up($breakpoint) {
  @if $breakpoint == tablet {
    @media (min-width: #{vars.$breakpoint-tablet}) { 
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (min-width: #{vars.$breakpoint-desktop}) { 
      @content;
    }
  } @else if $breakpoint == wide {
    @media (min-width: #{vars.$breakpoint-wide}) { 
      @content;
    }
  }
}

/**
 * Mixin to apply styles up to a given maximum width (max-width).
 * Usage: @include media-down(tablet) { ... }
 */
@mixin media-down($breakpoint) {
  @if $breakpoint == tablet {
    // Subtract a small amount to avoid issues with browser rounding (0.02px)
    @media (max-width: #{vars.$breakpoint-tablet - 0.02}) { 
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (max-width: #{vars.$breakpoint-desktop - 0.02}) { 
      @content;
    }
  } @else if $breakpoint == wide {
    @media (max-width: #{vars.$breakpoint-wide - 0.02}) { 
      @content;
    }
  }
}


/**
 * Mixin for consistent, reusable CSS transitions.
 * Usage: @include transition; // Transitions 'all' properties
 * Usage: @include transition(color, background-color); // Transitions specified properties
 */
/**
 * Mixin for consistent, reusable CSS transitions.
 */
@mixin transition($properties...) {
  $transition-list: ();

  @each $property in $properties {
    $transition-item: #{$property} #{vars.$transition-speed-base} #{vars.$transition-ease-base};
    $transition-list: join($transition-list, $transition-item, comma);
  }

  transition: $transition-list;
}


/**
 * Mixin to set font family for serif text.
 * Usage: @include font-serif;
 */
@mixin font-serif {
  font-family: vars.$font-serif;
}

/**
 * Mixin to set font family for sans-serif text.
 * Usage: @include font-sans;
 */
@mixin font-sans {
  font-family: vars.$font-sans;
}

/**
 * Mixin to apply text anti-aliasing for cleaner font rendering (optional).
 * Usage: @include text-smooth;
 */
@mixin text-smooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 * Accessibility utility to visually hide an element while keeping it available to screen readers.
 * Usage: @extend %visually-hidden;
 */
%visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}